{% set rawPageKey = page.fileSlug %}
{% set pageKey = rawPageKey %}

{# Sonderfall: concept-art-Version von abyss_03 #}
{% if page.url and 'concept-art' in page.url and pageKey == 'abyss_03' %}
    {% set pageKey = 'abyss_03_concept' %}
{% endif %}

<!DOCTYPE html>
<html lang="{{ lang }}">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{{ title }}</title>
        <link rel="stylesheet" href="/css/styles.css">
        <link  rel="stylesheet"  href="https://cdn.jsdelivr.net/npm/lightgallery@2.7.2/css/lightgallery-bundle.min.css"/>
        <script type="importmap">
            {
                "imports": {
                    "three": "https://unpkg.com/three@0.160.0/build/three.module.js"
                }
            }
        </script>
    </head>
    <body>
        <header>
            <a href="{% if lang == 'de' %}/{% else %}/en/{% endif %}" class="home">INSOMNEA art</a>
        </header>
        <main>
            {{ content | safe }}
        </main>
        <footer>
            {% if lang == "de" %}
                {% include "DEfooter.njk" %}
            {% else %}
                {% include "ENfooter.njk" %}
            {% endif %}
        </footer>
        <a href="#top" class="back-to-top" aria-label="ZurÃ¼ck nach oben">
            <img src="/assets/icons/icon_arrow_B.svg"
         alt="Pfeil nach oben"
         class="arrow-icon theme-icon-switch"
         data-dark="/assets/icons/icon_arrow_B.svg"
         data-light="/assets/icons/icon_arrow_D.svg">
        </a>

        <script>
            const backToTop = document.querySelector(".back-to-top");

            window.addEventListener("scroll", () => {
                if (window.scrollY > window.innerHeight) {
                    backToTop.style.display = "block";
                } else {
                    backToTop.style.display = "none";
                }
            });

            // Optional: Sanftes Scrollen
            document
                .querySelector(".back-to-top")
                .addEventListener("click", function (e) {
                    e.preventDefault();
                    window.scrollTo({top: 0, behavior: "smooth"});
                });
        </script>

        <script src="https://cdn.jsdelivr.net/npm/lightgallery@2.7.2/lightgallery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lightgallery@2.7.2/plugins/zoom/lg-zoom.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lightgallery@2.7.2/plugins/thumbnail/lg-thumbnail.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/lightgallery@2.7.2/plugins/video/lg-video.min.js"></script>

        <script>
            document
                .querySelectorAll(".lightgallery")
                .forEach((gallery) => {
                    lightGallery(gallery, {
                        plugins: [
                            lgZoom, lgThumbnail, lgVideo
                        ],
                        speed: 500,
                        zoom: true,
                        thumbnail: true,
                        download: false,
                        actualSize: true
                    });
                });
        </script>
        
        <script type="module">
            import * as THREE from 'https://unpkg.com/three@0.160.1/build/three.module.js';
            import {GLTFLoader} from 'https://unpkg.com/three@0.160.1/examples/jsm/loaders/GLTFLoader.js';

            function initThree(container, modelUrl) {
                const scene = new THREE.Scene();
                const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                const renderer = new THREE.WebGLRenderer({antialias: true});
                renderer.setSize(container.clientWidth, container.clientHeight);
                container.innerHTML = ''; // clean
                container.appendChild(renderer.domElement);

                const loader = new GLTFLoader();
                loader.load(modelUrl, (gltf) => {
                    scene.add(gltf.scene);
                });

                const light = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
                scene.add(light);
                camera.position.z = 2;

                function animate() {
                    requestAnimationFrame(animate);
                    model.rotation.y += 0.005;
                    renderer.render(scene, camera);
                }

                // Init on gallery open
                document.addEventListener('lgAfterOpen', () => {
                    document
                        .querySelectorAll('.threejs-container')
                        .forEach((container) => {
                            if (!container.dataset.loaded) {
                                const modelUrl = container.dataset.modelUrl;
                                initThree(container, modelUrl);
                                container.dataset.loaded = 'true';
                            }
                        });
                });
        </script>
    </body>
</html>